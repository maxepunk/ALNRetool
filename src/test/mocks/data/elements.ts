import type { Element } from '@/types/notion/app'

export const mockElements: Element[] = [
  {
    id: 'elem-1',
    name: 'CEO\'s Appointment Calendar',
    descriptionText: 'A leather-bound calendar with meetings and notes. SF_RFID: CAL001, SF_ValueRating: 4, SF_MemoryType: Business, SF_Group: Executive_Documents (x5)',
    sfPatterns: {
      rfid: 'CAL001',
      valueRating: 4,
      memoryType: 'Business',
      group: {
        name: 'Executive_Documents',
        multiplier: '5',
      },
    },
    basicType: 'Document',
    ownerId: 'char-1',
    containerId: undefined,
    contentIds: [],
    timelineEventId: 'event-1',
    status: 'Done',
    firstAvailable: 'Act 1',
    requiredForPuzzleIds: ['puzzle-1'],
    rewardedByPuzzleIds: [],
    containerPuzzleId: undefined,
    narrativeThreads: ['Corporate Conspiracy', 'Murder Timeline'],
    associatedCharacterIds: ['char-1', 'char-2'],
    puzzleChain: [],
    productionNotes: 'High-quality prop needed',
    filesMedia: [],
    contentLink: 'https://notion.so/calendar-prop',
    isContainer: false,
  },
  {
    id: 'elem-2',
    name: 'Detective\'s Badge',
    descriptionText: 'A worn police badge with scratches. SF_RFID: BADGE001, SF_ValueRating: 2, SF_MemoryType: Personal, SF_Group: Law_Enforcement (x3)',
    sfPatterns: {
      rfid: 'BADGE001',
      valueRating: 2,
      memoryType: 'Personal',
      group: {
        name: 'Law_Enforcement',
        multiplier: '3',
      },
    },
    basicType: 'Prop',
    ownerId: 'char-1',
    containerId: undefined,
    contentIds: [],
    timelineEventId: undefined,
    status: 'Done',
    firstAvailable: 'Act 0',
    requiredForPuzzleIds: [],
    rewardedByPuzzleIds: [],
    containerPuzzleId: undefined,
    narrativeThreads: ['Law Enforcement'],
    associatedCharacterIds: ['char-1'],
    puzzleChain: [],
    productionNotes: 'Realistic police badge',
    filesMedia: [],
    contentLink: undefined,
    isContainer: false,
  },
  {
    id: 'elem-3',
    name: 'Security Footage USB',
    descriptionText: 'Contains video from the night of the murder. SF_RFID: USB001, SF_ValueRating: 5, SF_MemoryType: Technical, SF_Group: Digital_Evidence (x8)',
    sfPatterns: {
      rfid: 'USB001',
      valueRating: 5,
      memoryType: 'Technical',
      group: {
        name: 'Digital_Evidence',
        multiplier: '8',
      },
    },
    basicType: 'Memory Token (Video)',
    ownerId: 'char-4',
    containerId: 'elem-10',
    contentIds: [],
    timelineEventId: 'event-2',
    status: 'In development',
    firstAvailable: 'Act 1',
    requiredForPuzzleIds: ['puzzle-2', 'puzzle-3'],
    rewardedByPuzzleIds: ['puzzle-1'],
    containerPuzzleId: 'puzzle-9',
    narrativeThreads: ['Murder Timeline', 'Digital Evidence'],
    associatedCharacterIds: ['char-1', 'char-4'],
    puzzleChain: ['puzzle-9'],
    productionNotes: 'Need to create video content',
    filesMedia: [],
    contentLink: 'https://notion.so/security-footage',
    isContainer: false,
  },
  {
    id: 'elem-4',
    name: 'CFO Access Card',
    descriptionText: 'High-level security clearance card. SF_RFID: CARD001, SF_ValueRating: 3, SF_MemoryType: Business, SF_Group: Security_Items (x4)',
    sfPatterns: {
      rfid: 'CARD001',
      valueRating: 3,
      memoryType: 'Business',
      group: {
        name: 'Security_Items',
        multiplier: '4',
      },
    },
    basicType: 'Prop',
    ownerId: 'char-2',
    containerId: undefined,
    contentIds: [],
    timelineEventId: undefined,
    status: 'Done',
    firstAvailable: 'Act 0',
    requiredForPuzzleIds: ['puzzle-10'],
    rewardedByPuzzleIds: [],
    containerPuzzleId: undefined,
    narrativeThreads: ['Corporate Access'],
    associatedCharacterIds: ['char-2'],
    puzzleChain: [],
    productionNotes: 'RFID-enabled prop',
    filesMedia: [],
    contentLink: undefined,
    isContainer: false,
  },
  {
    id: 'elem-10',
    name: 'Security Chief\'s Briefcase',
    descriptionText: 'Locked briefcase containing sensitive materials. SF_RFID: CASE001, SF_ValueRating: 4, SF_MemoryType: Business, SF_Group: Containers (x2)',
    sfPatterns: {
      rfid: 'CASE001',
      valueRating: 4,
      memoryType: 'Business',
      group: {
        name: 'Containers',
        multiplier: '2',
      },
    },
    basicType: 'Prop',
    ownerId: 'char-4',
    containerId: undefined,
    contentIds: ['elem-3', 'elem-20'],
    timelineEventId: undefined,
    status: 'In development',
    firstAvailable: 'Act 1',
    requiredForPuzzleIds: [],
    rewardedByPuzzleIds: [],
    containerPuzzleId: 'puzzle-9',
    narrativeThreads: ['Security', 'Containers'],
    associatedCharacterIds: ['char-4'],
    puzzleChain: ['puzzle-9'],
    productionNotes: 'Needs working lock mechanism',
    filesMedia: [],
    contentLink: undefined,
    isContainer: true,
  },
  {
    id: 'elem-20',
    name: 'Blackmail Photos',
    descriptionText: 'Compromising photos of board members. SF_RFID: PHOTO001, SF_ValueRating: 5, SF_MemoryType: Personal, SF_Group: Blackmail_Material (x10)',
    sfPatterns: {
      rfid: 'PHOTO001',
      valueRating: 5,
      memoryType: 'Personal',
      group: {
        name: 'Blackmail_Material',
        multiplier: '10',
      },
    },
    basicType: 'Memory Token (Image)',
    ownerId: 'char-4',
    containerId: 'elem-10',
    contentIds: [],
    timelineEventId: 'event-7',
    status: 'Writing Complete',
    firstAvailable: 'Act 2',
    requiredForPuzzleIds: ['puzzle-11'],
    rewardedByPuzzleIds: ['puzzle-9'],
    containerPuzzleId: undefined,
    narrativeThreads: ['Blackmail', 'Corporate Conspiracy'],
    associatedCharacterIds: ['char-4', 'char-7'],
    puzzleChain: [],
    productionNotes: 'Create prop photos',
    filesMedia: [],
    contentLink: undefined,
    isContainer: false,
  },
  // Add more elements for pagination testing
  {
    id: 'elem-5',
    name: 'Financial Ledger',
    descriptionText: 'Hidden accounting records. SF_RFID: LEDG001, SF_ValueRating: 4, SF_MemoryType: Business',
    sfPatterns: {
      rfid: 'LEDG001',
      valueRating: 4,
      memoryType: 'Business',
    },
    basicType: 'Document',
    ownerId: 'char-2',
    containerId: undefined,
    contentIds: [],
    timelineEventId: 'event-3',
    status: 'Done',
    firstAvailable: 'Act 1',
    requiredForPuzzleIds: [],
    rewardedByPuzzleIds: ['puzzle-2'],
    containerPuzzleId: undefined,
    narrativeThreads: ['Financial Crime'],
    associatedCharacterIds: ['char-2'],
    puzzleChain: [],
    productionNotes: '',
    filesMedia: [],
    contentLink: undefined,
    isContainer: false,
  },
  {
    id: 'elem-7',
    name: 'Lab Notebook',
    descriptionText: 'Dr. Wright\'s research notes. SF_RFID: LAB001, SF_ValueRating: 3, SF_MemoryType: Technical',
    sfPatterns: {
      rfid: 'LAB001',
      valueRating: 3,
      memoryType: 'Technical',
    },
    basicType: 'Document',
    ownerId: 'char-3',
    containerId: undefined,
    contentIds: [],
    timelineEventId: undefined,
    status: 'Writing Complete',
    firstAvailable: 'Act 1',
    requiredForPuzzleIds: ['puzzle-3'],
    rewardedByPuzzleIds: [],
    containerPuzzleId: undefined,
    narrativeThreads: ['Project Prometheus'],
    associatedCharacterIds: ['char-3'],
    puzzleChain: [],
    productionNotes: '',
    filesMedia: [],
    contentLink: undefined,
    isContainer: false,
  },
]

// Add many more elements for proper pagination testing (total 25+)
for (let i = 21; i <= 30; i++) {
  mockElements.push({
    id: `elem-${i}`,
    name: `Test Element ${i}`,
    descriptionText: `Test description ${i}`,
    sfPatterns: {},
    basicType: 'Prop',
    ownerId: undefined,
    containerId: undefined,
    contentIds: [],
    timelineEventId: undefined,
    status: 'Idea/Placeholder',
    firstAvailable: null,
    requiredForPuzzleIds: [],
    rewardedByPuzzleIds: [],
    containerPuzzleId: undefined,
    narrativeThreads: [],
    associatedCharacterIds: [],
    puzzleChain: [],
    productionNotes: '',
    filesMedia: [],
    contentLink: undefined,
    isContainer: false,
  })
}